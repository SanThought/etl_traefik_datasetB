version: "3.8"

services:
  traefik:
    image: traefik:v2.9
    container_name: traefik
    command:
      - "--api.insecure=true"             # Enable dashboard
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
      - "8080:8080"                       # Optional: Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - backend_network

  neo4j:
    build:
      context: ./neo4j_custom
    container_name: neo4j_db
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      - NEO4J_AUTH=${NEO4J_AUTH}
    volumes:
      - neo4j_data:/data
      - ./neo4j:/var/lib/neo4j/import
    networks:
      - backend_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.neo4j.rule=Host(`neo4j.localhost`)"
      - "traefik.http.routers.neo4j.entrypoints=web"
      - "traefik.http.services.neo4j.loadbalancer.server.port=7474"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7474"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:14
    container_name: postgres_db
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - backend_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.postgres.rule=Host(`postgresql.localhost`)"
      - "traefik.http.routers.postgres.entrypoints=web"
      - "traefik.http.services.postgres.loadbalancer.server.port=5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-check:
    image: nginx:alpine
    container_name: postgres_http_check
    networks:
      - backend_network
    volumes:
      - ./postgres/healthcheck.html:/usr/share/nginx/html/index.html:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.postgres.rule=Host(`postgresql.localhost`)"
      - "traefik.http.routers.postgres.entrypoints=web"
      - "traefik.http.services.postgres.loadbalancer.server.port=80"

  api_etl:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: api_etl
    depends_on:
      neo4j:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      - NEO4J_URI=bolt://neo4j_db:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - POSTGRES_HOST=postgres_db
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - ./output:/usr/src/app/output
    networks:
      - backend_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api_etl.rule=PathPrefix(`/santiago-vargas`)"
      - "traefik.http.routers.api_etl.entrypoints=web"
      - "traefik.http.services.api_etl.loadbalancer.server.port=3000"
      - "traefik.http.middlewares.strip-prefix_santiago-vargas.stripPrefix.prefixes=/santiago-vargas"
      - "traefik.http.routers.api_etl.middlewares=strip-prefix_santiago-vargas"

networks:
  backend_network:

volumes:
  neo4j_data:
  pg_data:
